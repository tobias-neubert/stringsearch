options
{
    MULTI=true;
    TRACK_TOKENS=true;
}

// -----------------------------------------------------------------------------------------------------------------
//
// Parser definition
//
// -----------------------------------------------------------------------------------------------------------------
PARSER_BEGIN(SimpleQueryParser)
package net.neubert.common.stringsearch.parser;

public class SimpleQueryParser
{
}
PARSER_END(SimpleQueryParser)

// -----------------------------------------------------------------------------------------------------------------
//
// Whitespace
//
// -----------------------------------------------------------------------------------------------------------------
SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

// -----------------------------------------------------------------------------------------------------------------
//
// Special tokens
//
// -----------------------------------------------------------------------------------------------------------------
TOKEN :
{
  < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COLON: ":" >
| < COMMA: "," >
| < DOT: "."  >
| < EQ: "=" >
| < DOLLAR: "$" >
| < STAR: "*" >
| < SLASH: "/" >
}

// -----------------------------------------------------------------------------------------------------------------
//
// Valid tokens for queries
//
// -----------------------------------------------------------------------------------------------------------------
TOKEN :
{
   <#DIGIT: ["0"-"9"]>
|  <#LOWER: ["a"-"z"]>
|  <#UPPER: ["A"-"Z", "_"]>
|  <SPECIAL: "!" | "\"" | <STAR> | <DOLLAR> | "%" | <DOT> | "#" | "+" | <COMMA> | "-" | "?" | <SLASH> | <COLON> | <SEMICOLON> | "<" | <EQ> | ">" | "@" | <LBRACKET> | <RBRACKET> | <LBRACE> | <RBRACE> | "`">
|  <APOSTROPHE: "'">
|  <CHARACTER: " " | <DIGIT> | <LOWER> | <UPPER> | <SPECIAL> | <APOSTROPHE>>
|  <TEXT: (<CHARACTER>)+>
}

// -----------------------------------------------------------------------------------------------------------------
//
// Query operators
//
// -----------------------------------------------------------------------------------------------------------------
TOKEN:
{
  <AND: "&" >
| <OR: "|" >
| <NOT: "^" >
| < LPAREN: "(" >
| < RPAREN: ")" >
}

// -----------------------------------------------------------------------------------------------------------------
//
// start -> expression
//
// -----------------------------------------------------------------------------------------------------------------
SimpleNode compile():
{
}
{
  expression()
  {
    return jjtThis;
  }
}

// -----------------------------------------------------------------------------------------------------------------
//
// expression -> term ("|" expression)?
//
// -----------------------------------------------------------------------------------------------------------------
void expression():
{
}
{
  term()
  (
    <OR> expression()
  )?
}

// -----------------------------------------------------------------------------------------------------------------
//
// term -> unary ("&" term)?
//
// -----------------------------------------------------------------------------------------------------------------
void term():
{
}
{
  unary()
  (
    <AND> term()
  )?
}

// -----------------------------------------------------------------------------------------------------------------
//
// unary -> text | not
//
// -----------------------------------------------------------------------------------------------------------------
void unary():
{
}
{
  text()
| not()
}

// -----------------------------------------------------------------------------------------------------------------
//
// not -> "^"text
//
// -----------------------------------------------------------------------------------------------------------------
void not():
{
}
{
  "^" text()
}

// -----------------------------------------------------------------------------------------------------------------
//
// text -> <TEXT> | parentheses
//
// -----------------------------------------------------------------------------------------------------------------
void text():
{
}
{
  <TEXT>
| parentheses()
}

// -----------------------------------------------------------------------------------------------------------------
//
// parentheses -> "(" expression ")"
//
// -----------------------------------------------------------------------------------------------------------------
void parentheses():
{
}
{
  <LPAREN> expression() <RPAREN>
}